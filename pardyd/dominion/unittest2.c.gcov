        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Function Tested: fullDeckCount()
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "interface.h"
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include "rngs.h"
        -:   13:
function main called 1 returned 100% blocks executed 71%
        1:   14:int main() {
        1:   15:  int passed = 0;
        1:   16:  int failed = 0;
        -:   17:  struct gameState game;
        1:   18:  int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   19:  initializeGame(2, k, 100, &game);
call    0 returned 100%
        -:   20:  int h1[0];
        -:   21:  int d1[0];
        -:   22:  int td1[0];
        -:   23:  memcpy(game.hand[0], h1, 0);
        -:   24:  memcpy(game.deck[0], d1, 0);
        -:   25:  memcpy(game.discard[0], td1, 0);
        1:   26:  game.handCount[0] = 0;
        1:   27:  game.deckCount[0] = 0;
        1:   28:  game.discardCount[0] = 0;
        -:   29:  
        1:   30:  printf("\nUNIT TEST 2: fillDeckCount()\n");
call    0 returned 100%
        1:   31:  printf("fillDeckCount() TEST 1: Empty Deck\n");
call    0 returned 100%
        1:   32:  passed++;
        1:   33:  int result = fullDeckCount(0, copper, &game);
call    0 returned 100%
        1:   34:  if (result == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   35:    printf("TEST 1 PASSED\n");
call    0 returned 100%
        -:   36:  }
        -:   37:  else {
    #####:   38:    printf("TEST 1 FAILED\n");
call    0 never executed
    #####:   39:    failed++;
        -:   40:  }
        -:   41:
        1:   42:  int h2[5] = {copper, silver, gold, silver, copper};
        1:   43:  memcpy(game.hand[0], h2, 5 * sizeof(int));
        1:   44:  game.handCount[0] = 5;
        1:   45:  int d2[7] = {copper, silver, copper, silver, gold, copper, gold};
        1:   46:  memcpy(game.deck[0], d2, 7 * sizeof(int));
        1:   47:  game.deckCount[0] = 7;
        1:   48:  int td2[3] = {copper, silver, gold};
        1:   49:  memcpy(game.discard[0], td2, 3 * sizeof(int));
        1:   50:  game.discardCount[0] = 3;
        -:   51:
        -:   52:  //5 Silver test
        1:   53:  printf("fillDeckCount() TEST 2: 5 silver in deck\n");
call    0 returned 100%
        1:   54:  passed++;
        1:   55:  result = fullDeckCount(0, silver, &game);
call    0 returned 100%
        1:   56:  if (result == 5) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:    printf("TEST 2 PASSED\n");
call    0 returned 100%
        -:   58:  }
        -:   59:  else {
    #####:   60:    printf("TEST 2 FAILED\n");
call    0 never executed
    #####:   61:    failed++;
        -:   62:  }
        -:   63:
        -:   64:  //6 Copper test
        1:   65:  printf("fillDeckCount() TEST 3: 6 copper in deck\n");
call    0 returned 100%
        1:   66:  passed++;
        1:   67:  result = fullDeckCount(0, copper, &game);
call    0 returned 100%
        1:   68:  if (result == 6) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   69:    printf("TEST 3 PASSED\n");
call    0 returned 100%
        -:   70:  }
        -:   71:  else {
    #####:   72:    printf("TEST 4 FAILED\n");
call    0 never executed
    #####:   73:    failed++;
        -:   74:  }
        -:   75:
        -:   76:  //4 Gold test
        1:   77:  printf("fillDeckCount() TEST 4: 4 gold in deck\n");
call    0 returned 100%
        1:   78:  passed++;
        1:   79:  result = fullDeckCount(0, gold, &game);
call    0 returned 100%
        1:   80:  if (result == 4) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   81:    printf("TEST 4 PASSED\n");
call    0 returned 100%
        -:   82:  }
        -:   83:  else {
    #####:   84:    printf("TEST 4 FAILED\n");
call    0 never executed
    #####:   85:    failed++;
        -:   86:  }
        -:   87:
        -:   88:  // Output what passed or failed.
        1:   89:  if (failed == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   90:    printf("4 OF 4 TESTS PASSED.\n\n");
call    0 returned 100%
        -:   91:  else
    #####:   92:    printf("%d OF 4 TESTS PASSED.\n\n", passed - failed);
call    0 never executed
        1:   93:  return 0;
        -:   94:}
