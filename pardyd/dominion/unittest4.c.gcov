        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Function Tested: updateCoins()
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include <stdlib.h>
        -:   13:#include "rngs.h"
        -:   14:
function main called 1 returned 100% blocks executed 80%
        1:   15:int main () {
        -:   16:    int i;
        -:   17:    struct gameState game;
        1:   18:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        1:   19:    int failed = 0;
        1:   20:    int hand1[5] = {smithy, minion, smithy, tribute, mine};
        1:   21:    int hand2[5] = {copper, copper, copper, copper, copper};
        1:   22:    int hand3[5] = {smithy, gold, gold, gold, copper};
        1:   23:    int hand4[5] = {gold, minion, embargo, village, silver};
        1:   24:    int hand5[5] = {silver, copper, copper, village, embargo};
        1:   25:    initializeGame(2, k, 100, &game);
call    0 returned 100%
        1:   26:    game.handCount[0] = 5;
        1:   27:    printf("\nUNIT TEST 4: updateCoins()\n");
call    0 returned 100%
        -:   28:
        -:   29:    // Testing no coins
        6:   30:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   31:      game.hand[0][i] = hand1[i];
        1:   32:    updateCoins(0, &game, 0);
call    0 returned 100%
        1:   33:    printf("\nupdateCoins() TEST 1: Hand with no coins\n");
call    0 returned 100%
        1:   34:    if (game.coins != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   35:      printf("TEST 1 FAILED\n");
call    0 never executed
    #####:   36:      failed++;
        -:   37:    } else
        1:   38:      printf("TEST 1 PASSED: Hand has no coins\n");
call    0 returned 100%
        -:   39:
        -:   40:    // All copper
        6:   41:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   42:      game.hand[0][i] = hand2[i];
        1:   43:    updateCoins(0, &game, 0);
call    0 returned 100%
        1:   44:    printf("\nupdateCoins() TEST 2: Hand with 5 coins\n");
call    0 returned 100%
        1:   45:    if (game.coins != 5){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:      printf("TEST 2 FAILED\n");
call    0 never executed
    #####:   47:      failed++;
        -:   48:    } else
        1:   49:      printf("TEST 2 PASSED: Hand has 5 coins\n");
call    0 returned 100%
        -:   50:
        -:   51:    // 3 Gold & 1 Copper
        6:   52:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   53:      game.hand[0][i] = hand3[i];
        1:   54:    updateCoins(0, &game, 0);
call    0 returned 100%
        1:   55:    printf("\nupdateCoins() TEST 3: Hand with 10 coins\n");
call    0 returned 100%
        1:   56:    if (game.coins != 10){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:      printf("TEST 3 FAILED\n");
call    0 never executed
    #####:   58:      failed++;
        -:   59:    } else
        1:   60:      printf("TEST 3 PASSED: Hand has 10 coins\n");
call    0 returned 100%
        -:   61:
        -:   62:    // 1 Gold & 1 Silver
        6:   63:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   64:      game.hand[0][i] = hand4[i];
        1:   65:    updateCoins(0, &game, 0);
call    0 returned 100%
        1:   66:    printf("\nupdateCoins() TEST 4: Hand with 5 coins\n");
call    0 returned 100%
        1:   67:    if (game.coins != 5){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:      printf("TEST 4 FAILED\n");
call    0 never executed
    #####:   69:      failed++;
        -:   70:    } else
        1:   71:      printf("TEST 4 PASSED: Hand has 5 coins\n");
call    0 returned 100%
        -:   72:
        -:   73:    // 1 Gold & 2 Copper
        6:   74:    for(i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   75:      game.hand[0][i] = hand5[i];
        1:   76:    updateCoins(0, &game, 0);
call    0 returned 100%
        1:   77:    printf("\nupdateCoins() TEST 5: Hand with 4 coins\n");
call    0 returned 100%
        1:   78:    if (game.coins != 4){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   79:      printf("TEST 5 FAILED\n");
call    0 never executed
    #####:   80:      failed++;
        -:   81:    } else
        1:   82:      printf("TEST 5 PASSED: Hand has 4 coins\n");
call    0 returned 100%
        -:   83:
        -:   84:
        1:   85:    printf("\n%d OF 5 TESTS PASSED\n\n", 5-failed);
call    0 returned 100%
        1:   86:    return 0;
        -:   87:}
