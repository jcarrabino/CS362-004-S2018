        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Card Tested: Smithy
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
function main called 1 returned 100% blocks executed 82%
        1:   16:int main() {
        1:   17:  int passed = 0;
        1:   18:  int failed = 0;
        1:   19:  int player1 = 0;
        1:   20:  int position = 0;
        1:   21:  int choice1 = 0;
        1:   22:  int choice2 = 0;
        1:   23:  int choice3 = 0;
        1:   24:  int bonus = 0;
        1:   25:  int k[10] = {smithy, adventurer, village, mine, minion, steward, treasure_map, council_room, feast, gardens};
        -:   26:  struct gameState game, test;
        1:   27:  initializeGame(2, k, 1000, &game);
call    0 returned 100%
        -:   28:
        1:   29:  printf("\nSMITHY cart test:\n");
call    0 returned 100%
        -:   30:
        1:   31:  memcpy(&test, &game, sizeof(struct gameState));
        1:   32:  printf("\nTEST 1: deck/hand counts match BEFORE playing Smithy\n");
call    0 returned 100%
        1:   33:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   34:  printf("Control hand count: %d\n", game.handCount[player1]);
call    0 returned 100%
        1:   35:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   36:  printf("Control deck count: %d\n", game.deckCount[player1]);
call    0 returned 100%
        1:   37:  if (test.handCount[player1] == game.handCount[player1] && test.deckCount[player1] == game.deckCount[player1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   38:    printf("TEST 1 PASSED\n");
call    0 returned 100%
        -:   39:  else {
    #####:   40:    printf("TEST 1 FAILEDn");
call    0 never executed
    #####:   41:    passed = 1;
    #####:   42:    failed++;
        -:   43:  }
        -:   44:  
        -:   45:  
        1:   46:  printf("\nTEST 2: deck/hand counts match AFTER playing Smithy\n");
call    0 returned 100%
        1:   47:  cardEffect(smithy, choice1, choice2, choice3, &test, position, &bonus);
call    0 returned 100%
        1:   48:  int cards = 3;
        -:   49:
        1:   50:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   51:  printf("Control hand count: %d\n", game.handCount[player1] + cards - 1);
call    0 returned 100%
        1:   52:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   53:  printf("Control hand count: %d\n", game.deckCount[player1] - cards);
call    0 returned 100%
        1:   54:  if (test.handCount[player1] == game.handCount[player1] + cards - 1 && test.deckCount[player1] == game.deckCount[player1] - cards)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   55:    printf("TEST 2 PASSED\n");
call    0 never executed
        -:   56:  else {
        1:   57:    printf("TEST 2 FAILED\n");
call    0 returned 100%
        1:   58:    passed = 1;
        1:   59:    failed++;
        -:   60:  }
        1:   61:  if (passed == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   62:    printf("\n%d out of 2 tests passed\n\n", 2 - failed);
call    0 never executed
        -:   63:  else
        1:   64:    printf("\n%d out of 2 tests failed\n\n", failed);
call    0 returned 100%
        1:   65:  return 0;
        -:   66:}
