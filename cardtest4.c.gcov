        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Card Tested: Steward
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
function main called 1 returned 100% blocks executed 74%
        1:   16:int main() {
        1:   17:  int passed = 0;
        1:   18:  int  failedTests = 0;
        1:   19:  int totalTests = 0;
        1:   20:  int player1 = 0;
        1:   21:  int position = 0;
        1:   22:  int choice1 = 0;
        1:   23:  int choice2 = 0;
        1:   24:  int choice3 = 0;
        1:   25:  int c1_after = 0;
        1:   26:  int c1_before = 0;
        1:   27:  int bonus = 0;
        1:   28:  int k[10] = {smithy, adventurer, village, mine, minion, steward, treasure_map, council_room, feast, gardens};
        -:   29:  struct gameState test1, test2, test3;
        1:   30:  initializeGame(2, k, 100, &test1);
call    0 returned 100%
        1:   31:  initializeGame(2, k, 100, &test2);
call    0 returned 100%
        1:   32:  initializeGame(2, k, 100, &test3);
call    0 returned 100%
        1:   33:  memcpy(&test2, &test1, sizeof(struct gameState));
        1:   34:  memcpy(&test3, &test1, sizeof(struct gameState));
        -:   35:
        1:   36:  printf("\nSTEWARD card test:\n");
call    0 returned 100%
        1:   37:  totalTests++;
        -:   38:  
        -:   39:  //int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   40:  // choice1 == 1, +2 cards
        -:   41:  // choice1 == 2, +2 coins
        -:   42:  // choice1 == 3, -2 cards from hand
        -:   43:  
        1:   44:  printf("\nTEST 1: Steward Choice 1, +2 cards to hand\n");
call    0 returned 100%
        1:   45:  printf("Test hand count BEFORE Steward: %d\n", test1.handCount[player1]);
call    0 returned 100%
        1:   46:  c1_before = test1.handCount[player1];
        1:   47:  choice1 = 1;
        1:   48:  cardEffect(steward, choice1, choice2, choice3, &test1, position, &bonus);
call    0 returned 100%
        1:   49:  printf("Test hand count AFTER Steward: %d\n", test1.handCount[player1]);  
call    0 returned 100%
        1:   50:  c1_after = test1.handCount[player1];
        -:   51:  // Actual hand count will increase by 1 since we discard the Steward card after plying it
        1:   52:  if (c1_after - c1_before == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:    printf("Steward choice 1 added two cards to players hand\n");
call    0 returned 100%
        1:   54:    printf("TEST 1 PASSED\n");  
call    0 returned 100%
        -:   55:  }
        -:   56:  else {
    #####:   57:    printf("Steward choice 1 DID NOT add two cards to players hand\n");
call    0 never executed
    #####:   58:    printf("TEST 1 FAILED\n");  
call    0 never executed
    #####:   59:    failedTests++;
        -:   60:  }
        -:   61:  
        -:   62:  
        1:   63:  printf("\nTEST 2: Steward Choice 2, +2 coins\n");
call    0 returned 100%
        1:   64:  totalTests++;
        1:   65:  printf("Test coin count BEFORE Steward: %d\n", test2.coins);
call    0 returned 100%
        1:   66:  c1_before = test2.coins;
        1:   67:  choice1 = 2;
        1:   68:  cardEffect(steward, choice1, choice2, choice3, &test2, position, &bonus);
call    0 returned 100%
        1:   69:  printf("Test coin count AFTER Steward: %d\n", test2.coins);
call    0 returned 100%
        1:   70:  c1_after = c1_before + 2;
        -:   71:  
        1:   72:  if (test2.coins == c1_after){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   73:    printf("Steward choice 2 added 2 coins to player 1\n");
call    0 returned 100%
        1:   74:    printf("TEST 2 PASSED\n");  
call    0 returned 100%
        -:   75:  }
        -:   76:  else {
    #####:   77:    printf("Steward choice 2 DID NOT add 2 coins to player 1\n");
call    0 never executed
    #####:   78:    printf("TEST 2 FAILED\n");  
call    0 never executed
    #####:   79:    passed = 1;
    #####:   80:    failedTests++;
        -:   81:  }   
        -:   82:  
        1:   83:  printf("\nTEST 3: Steward Choice 3, -2 cards from hand\n");
call    0 returned 100%
        1:   84:  totalTests++;  
        1:   85:  printf("Test hand count BEFORE steward is %d\n", test3.handCount[player1]);
call    0 returned 100%
        1:   86:  c1_before = test3.handCount[player1];
        1:   87:  choice1 = 3;
        1:   88:  cardEffect(steward, choice1, choice2, choice3, &test3, position, &bonus);
call    0 returned 100%
        1:   89:  printf("Test hand count AFTER steward is %d\n", test3.handCount[player1]);
call    0 returned 100%
        1:   90:  c1_after = test3.handCount[player1];  
        -:   91:  // Actual hand count will decrease by 3 since we discard the Steward card after plying it
        1:   92:  if (c1_before - c1_after == 3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   93:    printf("Steward choice 3 removed 2 cards from player's hand\n");
call    0 returned 100%
        1:   94:    printf("TEST 3 PASSED\n");  
call    0 returned 100%
        -:   95:  } else {
    #####:   96:    printf("Steward choice 3 DID NOT remove 2 cards from player's hand\n");
call    0 never executed
    #####:   97:    printf("TEST 3 FAILED\n");  
call    0 never executed
    #####:   98:    passed = 1;
    #####:   99:    failedTests++;
        -:  100:  }
        -:  101:  
        1:  102:  if (passed == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  103:    printf("\n%d out of 3 tests passed\n\n", totalTests - failedTests);
call    0 returned 100%
        -:  104:  else
    #####:  105:    printf("\n%d out of 3 tests passed\n\n", totalTests - failedTests);
call    0 never executed
        1:  106:  return 0;
        -:  107:}
