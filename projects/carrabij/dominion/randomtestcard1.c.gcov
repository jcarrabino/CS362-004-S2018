        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362 
        -:    4:*  Assignment: Smithy Random Test File
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include<stdio.h>
        -:    8:#include<stdlib.h>
        -:    9:#include <assert.h>
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:#include <time.h>
        -:   14:
function initTestGame called 87 returned 100% blocks executed 100%
       87:   15:void initTestGame(struct gameState *game) {
        -:   16:  int i, player;
       87:   17:  game->whoseTurn = rand() % 2;
call    0 returned 100%
        -:   18:  
        -:   19:  // Randomly generate hands, turns, decks, and discard for gameState
       87:   20:  int maxRandHand = rand() % (500 + 1);
call    0 returned 100%
       87:   21:  int maxRandTurn = rand() % (16 + 1);
call    0 returned 100%
       87:   22:  int maxRandDeck = rand() % (500 + 1);
call    0 returned 100%
       87:   23:  int maxRandDiscard = rand() % (500 + 1);
call    0 returned 100%
        -:   24:
        -:   25:  // Initialize player's hand
       87:   26:  game->hand[game->whoseTurn][0] = 7;
       87:   27:  game->handCount[game->whoseTurn] = maxRandHand;
    22039:   28:  for(i = 1; i < game->handCount[game->whoseTurn]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    21952:   29:    game->hand[game->whoseTurn][i] = maxRandTurn;
        -:   30:
       87:   31:  game->deckCount[game->whoseTurn] = maxRandDeck;
    19066:   32:  for(i = 0; i < game->deckCount[game->whoseTurn]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    18979:   33:    game->deck[game->whoseTurn][i] = maxRandTurn;
        -:   34:
       87:   35:  game->discardCount[game->whoseTurn] = maxRandDiscard;
    22485:   36:  for(i = 0; i < game->discardCount[game->whoseTurn]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    22398:   37:    game->discard[game->whoseTurn][i] = maxRandTurn;
        -:   38:
        -:   39:  // Initialize opponents hand
       87:   40:  if(game->whoseTurn == 0)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
       40:   41:    player = 1;
        -:   42:  else
       47:   43:    player = 0;
       87:   44:  game->handCount[player] = maxRandHand;
    22126:   45:  for(i = 0; i < game->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    22039:   46:    game->hand[player][i] = maxRandTurn;
        -:   47:
       87:   48:  game->deckCount[player] = maxRandDeck;
    19066:   49:  for(i = 0; i < game->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    18979:   50:    game->deck[player][i] = maxRandTurn;
        -:   51:
       87:   52:  game->discardCount[player] = maxRandDiscard;
    22485:   53:  for(i = 0; i < game->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    22398:   54:    game->discard[player][i] = maxRandTurn;
       87:   55:}
        -:   56:
function main called 1 returned 100% blocks executed 89%
        1:   57:int main() {
        1:   58:	int count = 1;
        1:   59:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   60:	int seed = rand() % 100 + 1;
call    0 returned 100%
        1:   61:    int loopCounter = rand() % 80 + 21;
call    0 returned 100%
        1:   62:	int players = 2;
        -:   63:    int init_hand, result_hand;
        -:   64:	struct gameState game;
        1:   65:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        1:   66:	initializeGame(players, k, seed, &game);
call    0 returned 100%
        1:   67:	game.phase = 0;
        1:   68:	game.numBuys = 1;
        -:   69:    
        -:   70:	int j;
       88:   71:	for(j = 0; j < loopCounter; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
       87:   72:        printf("|==================================================|\n");
call    0 returned 100%
       87:   73:        printf("|                 Random Test #%-3d                 |\n", count);
call    0 returned 100%
       87:   74:        printf("|--------------------------------------------------|\n");
call    0 returned 100%
       87:   75:		initTestGame(&game);
call    0 returned 100%
       87:   76:        printf("| Before Playing Smithy:                           |\n");
call    0 returned 100%
       87:   77:        printf("|    - Hand Count: %4d                            |\n", game.handCount[game.whoseTurn]);
call    0 returned 100%
       87:   78:        init_hand = game.handCount[game.whoseTurn];
       87:   79:        cardEffect(smithy, 0, 0, 0, &game, 0, 0);
call    0 returned 100%
       87:   80:        printf("|                                                  |\n");
call    0 returned 100%
       87:   81:        printf("| After Playing Smithy:                            |\n");
call    0 returned 100%
       87:   82:        printf("|    - Hand Count: %4d                            |\n", game.handCount[game.whoseTurn]);
call    0 returned 100%
       87:   83:        result_hand = game.handCount[game.whoseTurn];
       87:   84:        if (init_hand == result_hand - 2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   85:          printf("|--------------------------------------------------|\n");
call    0 never executed
    #####:   86:          printf("|                 Test #%-3d PASSED                 |\n", count);
call    0 never executed
    #####:   87:          printf("|==================================================|\n\n\n");       
call    0 never executed
        -:   88:        }
        -:   89:        else {
       87:   90:          printf("|--------------------------------------------------|\n");
call    0 returned 100%
       87:   91:          printf("|                Test #%-3d FAILED                  |\n", count);
call    0 returned 100%
       87:   92:          printf("|==================================================|\n\n\n");
call    0 returned 100%
        -:   93:        }
       87:   94:		count++;
        -:   95:	}
        1:   96:    return 0;
        -:   97:}
