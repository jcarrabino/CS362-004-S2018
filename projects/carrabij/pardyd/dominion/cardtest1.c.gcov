        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Card Tested: Adventurer
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
function main called 1 returned 100% blocks executed 77%
        1:   16:int main() {
        1:   17:  int passed = 0;
        1:   18:  int failed = 0;
        1:   19:  int player1 = 0;
        1:   20:  int position = 0;
        1:   21:  int choice1 = 0;
        1:   22:  int choice2 = 0;
        1:   23:  int choice3 = 0;
        1:   24:  int bonus = 0;
        1:   25:  int k[10] = {smithy, adventurer, village, mine, minion, steward, treasure_map, council_room, feast, gardens};
        -:   26:  char x1[32];
        -:   27:  char x2[32];
        -:   28:  struct gameState game, test;
        1:   29:  initializeGame(2, k, 100, &game);
call    0 returned 100%
        1:   30:  memcpy(&test, &game, sizeof(struct gameState));
        -:   31:
        1:   32:  printf("\nADVENTURER card test:\n");
call    0 returned 100%
        -:   33:  
        1:   34:  printf("\nTEST 1: Initial hand/deck counts match BEFORE playing Adventurer\n");
call    0 returned 100%
        1:   35:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   36:  printf("Control hand count: %d\n", game.handCount[player1]);
call    0 returned 100%
        1:   37:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   38:  printf("Control deck count: %d\n", game.deckCount[player1]);
call    0 returned 100%
        1:   39:  if (test.handCount[player1] == game.handCount[player1] && test.deckCount[player1] == game.deckCount[player1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   40:    printf("TEST 1 PASSED\n");
call    0 returned 100%
        -:   41:  else {
    #####:   42:    printf("TEST 1 FAILED\n");
call    0 never executed
    #####:   43:    passed = 1;
    #####:   44:    failed++;
        -:   45:  }
        -:   46:  
        -:   47:  
        1:   48:  printf("\nTEST 2: hand/deck counts AFTER playing Adventurer\n");
call    0 returned 100%
        1:   49:  cardEffect(adventurer, choice1, choice2, choice3, &test, position, &bonus);
call    0 returned 100%
        1:   50:  int addedCards = 2;
        1:   51:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   52:  printf("Control hand count: %d\n", game.handCount[player1] + addedCards - 1);
call    0 returned 100%
        1:   53:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   54:  printf("Control deck count: %d\n", game.deckCount[player1] - (game.discardCount[player1] + addedCards));
call    0 returned 100%
        1:   55:  if (test.handCount[player1] == game.handCount[player1] + addedCards - 1 && test.deckCount[player1] == game.deckCount[player1] - (game.discardCount[player1] + addedCards)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   56:    printf("Player successfully added two cards to hand after playing Adventurer card\n");
call    0 never executed
    #####:   57:    printf("TEST 2 PASSED\n");
call    0 never executed
        -:   58:  } else {
        1:   59:    printf("TEST 2 FAILED\n");
call    0 returned 100%
        1:   60:    passed = 1;
        1:   61:    failed++;
        -:   62:  }
        -:   63:  
        -:   64:  
        1:   65:  printf("\nTEST 3: player gained 2 treasure cards AFTER playing Adventurer\n");
call    0 returned 100%
        1:   66:  int first = game.hand[player1][game.handCount[player1]-1];
        1:   67:  int second = game.hand[player1][game.handCount[player1]-2];
        1:   68:  cardNumToName(first, x1);
call    0 returned 100%
        1:   69:  cardNumToName(second, x2);
call    0 returned 100%
        1:   70:  printf("First new card is %s\n", x1);
call    0 returned 100%
        1:   71:  printf("Second new card is %s\n", x2);
call    0 returned 100%
        1:   72:  if ((first != copper || first != silver || first != gold) && (second != copper || second != silver || second != gold)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
        1:   73:    printf("The player drew 2 treasure cards\n");
call    0 returned 100%
        1:   74:    printf("TEST 3 PASSED\n");
call    0 returned 100%
        -:   75:  } else {
    #####:   76:    printf("TEST 3 FAILED\n");
call    0 never executed
    #####:   77:    passed = 1;
    #####:   78:    failed++;
        -:   79:  }
        -:   80:  
        -:   81:  
        1:   82:  if (passed == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:    printf("\n3 of 3 tests passed.\n\n");
call    0 never executed
        -:   84:  else
        1:   85:    printf("\n%d of 3 tests failed.\n\n", failed);
call    0 returned 100%
        1:   86:  return 0;
        -:   87:}
