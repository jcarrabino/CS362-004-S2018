        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************
        -:    2:*  Name: John Carrabino
        -:    3:*  Class: CS362
        -:    4:*  Card Tested: Village
        -:    5:******************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "interface.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:#include <stdlib.h>
        -:   15:
function main called 1 returned 100% blocks executed 76%
        1:   16:int main() {
        1:   17:  int passed = 0;
        1:   18:  int failed = 0;
        1:   19:  int testCount = 0; 
        1:   20:  int player1 = 0;
        1:   21:  int position = 0;
        1:   22:  int choice1 = 0;
        1:   23:  int choice2 = 0;
        1:   24:  int choice3 = 0;
        1:   25:  int bonus = 0;
        1:   26:  int cards = 1;
        1:   27:  int k[10] = {smithy, adventurer, village, mine, minion, steward, treasure_map, council_room, feast, gardens};
        -:   28:  struct gameState game, test;
        1:   29:  initializeGame(2, k, 100, &game);
call    0 returned 100%
        -:   30:
        1:   31:  printf("\nVILLAGE Card Test:\n");
call    0 returned 100%
        1:   32:  memcpy(&test, &game, sizeof(struct gameState));
        1:   33:  testCount++;
        1:   34:  printf("\nTEST 1: Hand/Deck counts BEFORE playing Village Card\n");
call    0 returned 100%
        1:   35:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   36:  printf("Control hand count: %d\n", game.handCount[player1]);
call    0 returned 100%
        1:   37:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   38:  printf("Control deck count: %d\n", game.deckCount[player1]);
call    0 returned 100%
        -:   39:  
        -:   40:  //Test 1: Initial Hand/Deck Counts
        1:   41:  if (test.handCount[player1] == game.handCount[player1] && test.deckCount[player1] == game.deckCount[player1]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   42:    printf("Test hand/deck counts match actual counts\n");
call    0 returned 100%
        1:   43:    printf("TEST 1 PASSED\n");
call    0 returned 100%
        -:   44:  }  else {
    #####:   45:    printf("Test hand/deck counts DO NOT match actual counts\n");
call    0 never executed
    #####:   46:    printf("TEST 1 FAILED\n");
call    0 never executed
    #####:   47:    passed = 1;
    #####:   48:    failed++;
        -:   49:  }
        1:   50:  testCount++;
        -:   51:  
        -:   52:  //Test 2:Initial Action count
        1:   53:  printf("\nTEST 2: Action count BEFORE playing Village Card\n");
call    0 returned 100%
        1:   54:  printf("Test action count: %d\n", test.numActions);
call    0 returned 100%
        1:   55:  printf("Control action count: %d\n", game.numActions);
call    0 returned 100%
        1:   56:  if (test.numActions == game.numActions){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:    printf("Test action count matches Control count\n");
call    0 returned 100%
        1:   58:    printf("TEST 2 PASSED\n");
call    0 returned 100%
        -:   59:  } else {
    #####:   60:    printf("Test action count DOES NOT match actual action count\n");
call    0 never executed
    #####:   61:    printf("TEST 2 FAILED\n");
call    0 never executed
    #####:   62:    passed = 1;
    #####:   63:    failed++;
        -:   64:  }
        -:   65:  
        -:   66:  //Test 3: Hand/Deck counts AFTER playing Village Card
        1:   67:  cardEffect(village, choice1, choice2, choice3, &test, position, &bonus);
call    0 returned 100%
        1:   68:  testCount++;
        1:   69:  printf("\nTEST 3: Hand/Deck counts AFTER playing Village Card\n");
call    0 returned 100%
        1:   70:  printf("Test hand count: %d\n", test.handCount[player1]);
call    0 returned 100%
        1:   71:  printf("Control hand count: %d\n", game.handCount[player1] + cards - 1);
call    0 returned 100%
        1:   72:  printf("Test deck count: %d\n", test.deckCount[player1]);
call    0 returned 100%
        1:   73:  printf("Control deck count: %d\n", game.deckCount[player1] - cards);
call    0 returned 100%
        1:   74:  if (test.handCount[player1] == game.handCount[player1] + cards - 1 && test.deckCount[player1] == game.deckCount[player1] - cards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   75:    printf("Test hand/deck counts match actual counts\n");
call    0 returned 100%
        1:   76:    printf("TEST 3 PASSED\n");
call    0 returned 100%
        -:   77:  }  else {
    #####:   78:    printf("Test hand/deck counts DO NOT match actual counts\n");
call    0 never executed
    #####:   79:    printf("TEST 3 FAILED\n");
call    0 never executed
    #####:   80:    passed = 1;
    #####:   81:    failed++;
        -:   82:  }
        -:   83:  
        -:   84:  //Test 4: Action count AFTER playing village Card. 
        1:   85:  testCount++;
        1:   86:  printf("\nTEST 4: Action counts AFTER playing Village Card");
call    0 returned 100%
        1:   87:  printf("Test action count: %d\n", test.numActions);
call    0 returned 100%
        1:   88:  printf("Control action count: %d\n", game.numActions + 2);
call    0 returned 100%
        1:   89:  if (test.numActions == game.numActions + 2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   90:    printf("Test action count matches actual count\n");
call    0 never executed
    #####:   91:    printf("TEST 4 PASSED\n");
call    0 never executed
        -:   92:  }  else {
        1:   93:    printf("Test action count DOES NOT match actual action count\n");
call    0 returned 100%
        1:   94:    printf("TEST 4 FAILED\n");
call    0 returned 100%
        1:   95:    passed = 1;
        1:   96:    failed++;
        -:   97:  }
        -:   98:
        1:   99:  if (passed == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  100:    printf("\n%d out of %d tests passed\n\n", testCount - failed, testCount);
call    0 never executed
        -:  101:  else
        1:  102:    printf("\n%d out of %d tests passed\n\n", testCount - failed, testCount);
call    0 returned 100%
        1:  103:  return 0;
        -:  104:}
